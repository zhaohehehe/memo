<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.*</groupId>
	<artifactId>*</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>*</name>
	<modules>
		<module>b1</module>
		<module>b2</module>
		<module>b3</module>
		<module>b4</module>
		<module>b5</module>
    <module>b6</module>
  </modules>
	<!-- <distributionManagement> <repository> <id>central</id> <url>https://*/nexus/content/repositories/releases/</url> 
		</repository> <snapshotRepository> <id>central</id> <url>https://*/nexus/content/repositories/snapshots/</url> 
		<uniqueVersion>false</uniqueVersion> </snapshotRepository> </distributionManagement> -->
	<properties>
		<maven.compile.source>1.5</maven.compile.source>
		<maven.compile.target>1.5</maven.compile.target>
		<maven.compile.deprecation>off</maven.compile.deprecation>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>  
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>  
		<!-- 用于标识是否将不属于该模块的包（即路径中不包含项目模块名称的包）打进jar中；如果全部打进jar包，cmd中命令为：-Dall=** ;
			例如:以模块b-core为例，工程目录结构如下：
				b-core
					src/main/java
						com
							a/**
							b/**
			打包时，如果不加-Dall=**参数，那么所有的包都不会打入JAR，因为没有 包名 中含有字符串"core"的包；
				   如果加-Dall=**参数，所有包都会打入JAR，如果没有特殊需求，建议打包时添加该参数；
			-->
		<property>all</property>
	</properties>
	<dependencies>
		<dependency>
			<groupId>jdk.tools</groupId>
			<artifactId>jdk.tools</artifactId>
			<version>1.7</version>
			<scope>system</scope>
			<systemPath>${JAVA_HOME}/lib/tools.jar</systemPath>
		</dependency>
		
	</dependencies>
	<build>
  	  <defaultGoal>install</defaultGoal>
	  <finalName>${project.artifactId}-${project.version}</finalName>
	  <directory>${basedir}/target</directory>
	  <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
	  <testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>
	  <outputDirectory>${basedir}/target/classes</outputDirectory>
	  <testOutputDirectory>${basedir}/target/test-classes</testOutputDirectory>
	  <scriptSourceDirectory>${basedir}/src/main/scripts</scriptSourceDirectory>
	  <resources>
      	<resource>
        	<directory>${project.basedir}/src/main/java</directory>
        	<includes>
        		<include>**/*.xml</include>
        		<include>**/*.properties</include>
        	</includes>
      	</resource>
      	<resource>
        	<directory>${project.basedir}/src/main/resources</directory>
        	<includes>
        		<include>**/*.xml</include>
        		<include>**/*.properties</include>
        		<include>**/*.js</include>
        		<include>**/*.jsp</include>
        		<include>**/*.jpg</include>
        		<include>**/*.png</include>
        		<include>**/*.gif</include>
        		<include>**/*.sql</include>
        	</includes>
        	<filtering>true</filtering>
      	</resource>
      	<resource>
				<directory>${project.basedir}/src/main/lib</directory>
				<excludes>
					<exclude>*.jar</exclude>
					<exclude>*.zip</exclude>
				</excludes>
		</resource>
      </resources>
      <testResources>
      	<testResource>
      		<directory>${project.basedir}/src/main/test</directory>
      	</testResource>
      </testResources>
      <plugins>
    	<plugin>
        	<groupId>org.codehaus.mojo</groupId>
        	<artifactId>build-helper-maven-plugin</artifactId>
        	<version>1.8</version>
        	<executions>
        		<!--截取 ${project.artifactId}，用于过滤文件，例如将 bmm-resourceNode 截取为 resourceNode-->
          		<execution>
            		<id>regex-property1</id>
            		<phase>compile</phase>
            		<goals>
              			<goal>regex-property</goal>
            		</goals>
            		<configuration>
                  		<name>flag.dir.temp</name>
                  		<value>${project.artifactId}</value>
                  		<regex>.*-</regex>
                  		<replacement></replacement>
                  		<failIfNoMatch>false</failIfNoMatch>
            		</configuration>
          		</execution>
          		<!--截取 ${project.artifactId}，用于过滤文件，例如将上面id = regex-property1 中的resourceNode 截取为 resource-->
          		<execution>
            		<id>regex-property2</id>
            		<phase>compile</phase>
            		<goals>
              			<goal>regex-property</goal>
            		</goals>
            		<configuration>
                  		<name>flag.dir</name>
                  		<value>${flag.dir.temp}</value>
                  		<regex>[A-Z]+.*</regex>
                  		<replacement></replacement>
                  		<failIfNoMatch>false</failIfNoMatch>
            		</configuration>
          		</execution>
          		<!--截取 ${project.artifactId}，用于过滤resource文件，例如将上面id = bmm-resourceNode 截取为 resourceNode 截取为 bmm*esourceNode-->
          		<execution>
            		<id>regex-property3</id>
            		<phase>compile</phase>
            		<goals>
              			<goal>regex-property</goal>
            		</goals>
            		<configuration>
                  		<name>resourcePath</name>
                  		<value>${project.artifactId}</value>
                  		<regex>-.</regex>
                  		<replacement>*</replacement>
                  		<failIfNoMatch>false</failIfNoMatch>
            		</configuration>
          		</execution>
        	</executions>
      	</plugin>
      	<plugin>
    		<groupId>org.apache.maven.plugins</groupId>
    		<artifactId>maven-compiler-plugin</artifactId>
    		<configuration>
    			<source>1.7</source>
    			<target>1.7</target>
    			<encoding>UTF-8</encoding>
    			<!--如果出现以下ERROR:
    					1.找不到java.lang;
    					2.无效标记;
    				请将compilerArgs参数注释掉!
    			-->
    			<!-- <compilerArgs> 
                    <arg>-bootclasspath</arg>
                    <arg>${env.JAVA_HOME}/jre/lib/rt.jar,${env.JAVA_HOME}/lib/jce.jar</arg>
                    <arg>-extdirs</arg> 
                 	加载工程引用lib的路径
                    <arg>${project.basedir}/src/main/lib</arg>
               </compilerArgs>  -->
    		</configuration>
    	</plugin>
	  </plugins>
	</build>
	<!-- profile -->
	<profiles>
		<!--multiple 同时打多个jar包：
			cmd中命令为：mvn clean package -Dcomponent=multiple;
			注意：不要使用install命令，否则会出现依赖找不到的情况！！
		  -->
		<profile>
			<id>component-multiple</id>
			<activation>
				<property>
					<name>component</name>
  					<value>multiple</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
    					<artifactId>maven-jar-plugin</artifactId>
    					<version>2.4</version>
    					<executions>
    						<execution>
                        		<id>component-vo</id>
                       			<goals><goal>jar</goal></goals>
                        		<phase>package</phase>
                        		<configuration>
                        			<classifier>vo</classifier>
    								<outputDirectory>${settings.localRepository}/com/*/${project.artifactId}/${project.version}-vo</outputDirectory>
    								<includes>
        								<include>**/vo/**/*.class</include>
        							</includes>
    							</configuration>
                    		</execution>
                    		<execution>
                        		<id>component-po</id>
                       			<goals><goal>jar</goal></goals>
                        		<phase>package</phase>
                        		<configuration>
                        			<classifier>po</classifier>
    								<outputDirectory>${settings.localRepository}/com/*/${project.artifactId}/${project.version}-po</outputDirectory>
    								<includes>
        								<include>**/${flag.dir}/**/po/**</include>
        								<include>**/${flag.dir}/**/dao/*IdGenerator*</include>
        								<include>com/${all}/po/**</include>
        								<include>com/${all}/dao/*IdGenerator*</include>
        								<include>cache/${all}/po/**</include>
        								<include>cache/${all}/dao/*IdGenerator*</include>
        								<include>org/${all}/po/**</include>
        								<include>org/${all}/dao/*IdGenerator*</include>
        								<include>META-INF/web-fragment.xml</include>
        								<include>sql/**</include>
        							</includes>
    							</configuration>
                    		</execution>
                    		<execution>
                        		<id>component-logic</id>
                       			<goals><goal>jar</goal></goals>
                        		<phase>package</phase>
                        		<configuration>
    								<classifier>logic</classifier>
    								<outputDirectory>${settings.localRepository}/com/*/${project.artifactId}/${project.version}-logic</outputDirectory>
    								<includes>
    									<include>**/${flag.dir}/**/po/**</include>
    									<include>**/${flag.dir}/**/dao/**</include>
    									<include>**/${flag.dir}/**/bean/**</include>
    									<include>**/${flag.dir}/**/logic/**</include>
    									<include>${resourcePath}/**</include>
    									<include>com/${all}/po/**</include>
    									<include>com/${all}/dao/**</include>
    									<include>com/${all}/bean/**</include>
    									<include>com/${all}/logic/**</include>
    									<include>cache/${all}/po/**</include>
    									<include>cache/${all}/dao/**</include>
    									<include>cache/${all}/bean/**</include>
    									<include>cache/${all}/logic/**</include>
    									<include>org/${all}/po/**</include>
    									<include>org/${all}/dao/**</include>
    									<include>org/${all}/bean/**</include>
    									<include>org/${all}/logic/**</include>
    									<include>META-INF/web-fragment.xml</include>
        								<include>sql/**</include>
    								</includes>
    								<excludes>
    									<exclude>${resourcePath}/struts-*.xml</exclude>
    								</excludes>
    							</configuration>
                    		</execution>
                    		<execution>
                        		<id>component-app</id>
                       			<goals><goal>jar</goal></goals>
                        		<phase>package</phase>
                        		<configuration>
                        			<classifier>app</classifier>
    								<outputDirectory>${settings.localRepository}/com/*/${project.artifactId}/${project.version}-app</outputDirectory>
    								<includes>
    									<include>**/${flag.dir}/**</include>
    									<include>${resourcePath}/**</include>
    									<include>META-INF/resources/**</include>
    									<include>com/${all}</include>
    									<include>cache/${all}</include>
    									<include>org/${all}</include>
    									<include>META-INF/web-fragment.xml</include>
        								<include>sql/**</include>
    								</includes>
    							</configuration>
                    		</execution>
                		</executions>
				  	</plugin>
				</plugins>
			</build>
		</profile>
		<!--vo jar中包含：
			1.所有的vo
			cmd中命令为：-Dcomponent=vo
		  -->
		<profile>
			<id>component-vo</id>
			<activation>
				<property>
					<name>component</name>
  					<value>vo</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
    					<artifactId>maven-jar-plugin</artifactId>
    					<version>2.4</version>
    					<configuration>
    						<classifier>vo</classifier>
    						<outputDirectory>D:\*-NewMVN3\output</outputDirectory>
    						<includes>
        						<include>**/vo/**/*.class</include>
        					</includes>
    					</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!--po jar中包含：
			1.所有的po + po所对应的hbm.xml文件
			2.hbm.xml中配置的生成ID的class
			3.所有META-INF/web-fragment.xml
			4.所有sql
			cmd中命令为：-Dcomponent=po
		  -->
		<profile>
			<id>component-po</id>
			<activation>
				<property>
					<name>component</name>
  					<value>po</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
    					<artifactId>maven-jar-plugin</artifactId>
    					<version>2.4</version>
    					<configuration>
    						<!-- <classifier>po</classifier> -->
    						<outputDirectory>D:\*-NewMVN3\output</outputDirectory>
    						<includes>
        						<include>**/${flag.dir}/**/po/**</include>
        						<include>**/${flag.dir}/**/dao/*IdGenerator*</include>
        						<include>com/${all}/po/**</include>
        						<include>com/${all}/dao/*IdGenerator*</include>
        						<include>cache/${all}/po/**</include>
        						<include>cache/${all}/dao/*IdGenerator*</include>
        						<include>org/${all}/po/**</include>
        						<include>org/${all}/dao/*IdGenerator*</include>
        						<include>META-INF/web-fragment.xml</include>
        						<include>sql/**</include>
        					</includes>
    					</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!--logic jar中包含：
			1.所有的po
			2.所有dao
			3.所有bean
			4.所有logic
			5.相关的spring配置文件
			6.所有META-INF/web-fragment.xml
			7.所有sql
			cmd中命令为：-Dcomponent=logic
		  -->
		<profile>
			<id>component-logic</id>
			<activation>
				<property>
					<name>component</name>
  					<value>logic</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
    					<artifactId>maven-jar-plugin</artifactId>
    					<version>2.4</version>
    					<configuration>
    						<!-- <classifier>logic</classifier> -->
    						<outputDirectory>D:\*-NewMVN3\output</outputDirectory>
    						<includes>
    							<include>**/${flag.dir}/**/po/**</include>
    							<include>**/${flag.dir}/**/dao/**</include>
    							<include>**/${flag.dir}/**/bean/**</include>
    							<include>**/${flag.dir}/**/logic/**</include>
    							<include>${resourcePath}/**</include>
    							<include>com/${all}/po/**</include>
    							<include>com/${all}/dao/**</include>
    							<include>com/${all}/bean/**</include>
    							<include>com/${all}/logic/**</include>
    							<include>cache/${all}/po/**</include>
    							<include>cache/${all}/dao/**</include>
    							<include>cache/${all}/bean/**</include>
    							<include>cache/${all}/logic/**</include>
    							<include>org/${all}/po/**</include>
    							<include>org/${all}/dao/**</include>
    							<include>org/${all}/bean/**</include>
    							<include>org/${all}/logic/**</include>
    							<include>META-INF/web-fragment.xml</include>
        						<include>sql/**</include>
    						</includes>
    						<excludes>
    							<exclude>${resourcePath}/struts-*.xml</exclude>
    						</excludes>
    					</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!--app jar中包含：
			1.所有的源文件
			2.所有配置文件
			3.所有META-INF/web-fragment.xml
			4.所有sql
			cmd中命令为：-Dcomponent=app
		  -->
		<profile>
			<id>component-app</id>
			<activation>
				<property>
					<name>component</name>
  					<value>app</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
    					<artifactId>maven-jar-plugin</artifactId>
    					<version>2.4</version>
    					<configuration>
    						<!-- <classifier>app</classifier> -->
    						<outputDirectory>D:\*-NewMVN3\output</outputDirectory>
    						<includes>
    							<include>**/${flag.dir}/**</include>
    							<include>${resourcePath}/**</include>
    							<include>META-INF/resources/**</include>
    							<include>com/${all}</include>
    							<include>cache/${all}</include>
    							<include>org/${all}</include>
    							<include>META-INF/web-fragment.xml</include>
        						<include>sql/**</include>
    						</includes>
    					</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- 该profile作为jar包中是否包含.java代码文件的标识；如果包含，cmd中命令为：-Pjavadoc -->
		<profile>
			<id>javadoc</id>
			<build>
				<resources>
					<resource>
						<directory>${project.basedir}/src/main/java</directory>
						<includes>
							<include>**/*.java</include>
						</includes>
					</resource>
				</resources>
			</build>
		</profile>
	</profiles>
</project>