-- 表占用空间大小以及记录数
	SELECT TABLE_NAME,DATA_LENGTH+INDEX_LENGTH,TABLE_ROWS FROM information_schema.TABLES WHERE TABLE_SCHEMA='bdam_test';

-- 查询是否锁表 
	1、查询是否锁表(查看那些表被锁) 
	show OPEN TABLES where In_use > 0;
	2、查询进程
	show processlist   查询到相对应的进程===然后 kill    id
	补充：
		查看正在锁的事务
		SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; 
		查看等待锁的事务
		SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;
	
-- 慢SQL查询	
	-- 查看慢查询时间
	show variables like "long_query_time";默认10s
	-- 查看慢查询配置情况
	show status like "%slow_queries%";
	-- 查看慢查询日志路径
	show variables like "%slow%";
-- 连接数	
	-- MYSQL服务端允许的最大连接会话数量
	show status like '%max_connections%'; 
	-- 重新设置
	set global max_connections=10
	-- MYSQL SERVER自上次启动起来最大连接数量和发生的时间
	show global status like 'Max_used_connections';
	show global status like 'Max_used_connections_time';
-- 连接阻塞
	-- MYSQL connect()-->>服务端listen()-->>进入未决连接队列-->>服务端accpet()-->>建立连接传输交互
	-- 这个参数实际控制的是一种阻塞，如果我设置back_log为2，那么同时进入未决连接队列的连接就是2，这个时候如果这两个连接都还没有accpet()完成，
	-- 那么，又来的新连接只有等待进入这个队列，就是一种阻塞。
	-- 也就是说，如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，
	-- 如果等待连接的数量超过back_log，将不被授予连接资源。将会报：unauthenticated user | xxx.xxx.xxx.xxx | NULL | Connect | NULL | login | NULL 的待连接进程
	-- back_log值不能超过TCP/IP连接的侦听队列的大小。若超过则无效，查看当前系统的TCP/IP连接的侦听队列的大小命令：cat /proc/sys/net/ipv4/tcp_max_syn_backlog，目前系统为1024。对于Linux系统推荐设置为大于512的整数。
	-- 修改系统内核参数，可以编辑/etc/sysctl.conf去调整它。如：net.ipv4.tcp_max_syn_backlog = 2048，改完后执行sysctl -p 让修改立即生效
	show variables like 'back_log%';
-- 线程池
	show status like 'Threads%';
	-- mysql管理的线程池中还有多少可以被复用的资源
	Threads_cached  3  
	-- 打开的连接数
	Threads_connected 137
	-- 表示创建过的线程数，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值（60-64左右），查询服务器，修改my.cnf文件：
	-- show variables like 'thread_cache_size'; 
	-- set global thread_cache_size=60;
	Threads_created 542106
	-- 激活的连接数，这个数值一般远低于connected数值，准确的来说，Threads_running是代表当前并发数
	Threads_running 1
-- 表文件缓存描述符table_open_cache
	show global status like 'open%tables%';
	-- table_open_cache表文件描述符的缓存大小( 当打开一个表后 会把这个表的文件描述符缓存下来 )
	-- 如果Opened_tables数值非常大，说明cache太小，导致要频繁地open table，可以查看下当前的table_open_cache设置
	-- 一些资料推荐把这个数值设置为：max_connections* 并发查询用到的表数，还是以实际情况为准
	show variables like '%table_open_cache%';
	show variables like '%max_connections%';
	set global table_open_cache=1024;

	-- table_open_cache 设置多少合适呢 ？
	-- 不是越大越好table_open_cache过大占用大量文件描述符资源而不释放用尽了系统文件描述符资源导致无法接入新的连接

	-- 如何判断 table_open_cache 大小是否够用？
	-- 可根据MySQL的两个状态值来分析 Opened_tables : 打开的所有表数量、Open_tables : 打开后在缓存中的表数量
	-- show global status like 'open%tables%';
	-- 当缓存中的值open_tables 临近到了 table_open_cache 值的时候，说明表缓存池快要满了，但 Opened_tables 还在一直有新的增长。
	-- 这说明你还有很多未被缓存的表，这时可以适当增加 table_open_cache 的大小
	-- 这里不知道和这个限制有没有关系？？？？？？？！！！show variables like 'open%'查看打开文件限制数量。
	
-- 如何在MySQL中分配innodb_buffer_pool_size
	参考：https://www.cnblogs.com/wanbin/p/9530833.html
	-- Performance = innodb_buffer_pool_reads / innodb_buffer_pool_read_requests * 100
	-- innodb_buffer_pool_reads：表示InnoDB缓冲池无法满足的请求数。需要从磁盘中读取。
	-- innodb_buffer_pool_read_requests：表示从内存中读取逻辑的请求数。
	-- show status like 'innodb_buffer_pool_read%';
	-- 如果Performance很小，意味着InnoDB可以满足缓冲池本身的大部分请求。从磁盘完成读取的百分比非常小。因此无需增加innodb_buffer_pool_size值。
-- open_files_limit设置
	-- 比较合适的设置：Open_files / open_files_limit * 100% <= 75%
	show variables like 'open%';
	show global status like 'open%file%';
-- get an error reading communitation packets
	-- a communication packet 代表着：
	-- 1. 客户端发送到mysql 服务端的单个SQL STATEMENT
	-- 2. 服务端发送到客户端的单行数据
	-- 3. master发往slave的一个binary log event。
	show variables like '%max_allowed_packet%';
	-- 当传输的packet大于max_allowed_packet时，触发错误EN_NET_PACKET_TOO_LARGE,并且关闭Connection。
	-- 在有的客户端中也会显示信息Lost connection to MySQL server during query
	-- 客户端和服务端都有自己的max_allowed_packet变量，所以要调节此参数时，必须同时增加server端和client端的配置变量。
	-- 增大此配置的值并不会有太多危险，因为额外的内存仅仅只在需要的时候被分配。我们可以增大此值以便于server端接收更大的SQL（比如，涉及BLOB列）
	